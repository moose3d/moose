@version@
#ifdef GL_ES
#define IN attribute
#define OUT varying
#else
#define IN in
#define OUT out
#endif
struct MMaterial {
  vec4 diffuse;
  vec4 ambient;
  vec4 specular;
  vec4 emission;
  float shininess;
};
////////////////////////////////////////////////////////////////////////////////
// Moose light struct
// , apparently only Struct of Arrays is supported.
struct MLights 
{
  vec4 ambient[3];
  vec4 diffuse[3];
  vec4 specular[3];
  vec3 position[3]; 
  vec3 halfVector[3];
  vec3 direction[3];
  float spotAngle[3]; 
  float spotExponent[3];
  float constantAttenuation[3];
  float linearAttenuation[3];
  float quadraticAttenuation[3];
  bool  enabled[3];
};

OUT  vec2        texcoord;
OUT  vec3        normal;

OUT  float       ldist[3];
OUT  vec3        lightDir[3];
OUT  vec3        halfVector[3];

IN  vec3 a_vertex;
IN  vec2 a_texcoord;
IN  vec3 a_normal;

uniform mat4 m_viewMatrix;
uniform mat4 m_projMatrix;
uniform mat4 m_modelMatrix;

uniform MLights m_Lights;
uniform MMaterial m_Material;
uniform vec4    m_globalAmbient;

void main()
{
  
  //globalAmbient = m_globalAmbient * m_Material.ambient;
  vec4 vert    = m_modelMatrix * vec4(a_vertex,1.0);
  vec3 vert2light;

  for( int i=0;i<3;i++)
  {
    
    if ( m_Lights.enabled[i] )
    {
      if ( m_Lights.spotAngle[i] < 0.0 )  /* directional light */
      {
        lightDir[i] = normalize((m_viewMatrix * vec4(-m_Lights.direction[i],0.0)).xyz);
        halfVector[i] = normalize((m_viewMatrix * vec4(m_Lights.halfVector[i],0.0)).xyz);

        //diffuse[i]  = m_Material.diffuse * m_Lights.diffuse[i];
        //ambient[i]  = m_Material.ambient * m_Lights.ambient[i];
      } 
      else if ( m_Lights.spotAngle[i] < 90.001 ) /* spotlight */
      {
        
      }
      else  /* pointlight */
      {
        vert2light = m_Lights.position[i] - vert.xyz;
        lightDir[i]   = normalize((m_viewMatrix * vec4(vert2light,0.0)).xyz);
        halfVector[i] = normalize((m_viewMatrix * vec4(m_Lights.halfVector[i],0.0)).xyz);
        //diffuse[i]  = m_Material.diffuse * m_Lights.diffuse[i];
        //ambient[i]  = m_Material.ambient * m_Lights.ambient[i];
        ldist[i] = length(vert2light);
      }
    }
  }
  gl_Position  = m_projMatrix * m_viewMatrix * vert;
  normal = normalize((m_viewMatrix * m_modelMatrix * vec4(a_normal,0.0)).xyz);
  texcoord = a_texcoord;
}                 
